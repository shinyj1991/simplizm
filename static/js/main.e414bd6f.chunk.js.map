{"version":3,"sources":["layout/CommonHeader.js","pages/Home.js","pages/Asset.js","pages/App.js","serviceWorker.js","index.js"],"names":["CommonHeader","id","className","to","Home","state","myAsset","result","assetChange","e","setState","target","value","actionCompute","type","key","parseInt","test","group","percentile","forEach","o","i","newFormat","Intl","NumberFormat","max","val","percent","ranking","toFixed","format","alert","this","onChange","onKeyPress","placeholder","onClick","Parser","Component","App","exact","path","component","Asset","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e414bd6f.chunk.js","sourcesContent":["import React from 'react';\nimport 'scss/style.scss';\nimport { Link } from \"react-router-dom\";\n\nfunction CommonHeader() {\n  return (\n    <header id=\"header\">\n      <h1 className=\"logo\"><Link to=\"/\">SIMPLIZM</Link></h1>\n    </header>\n  );\n}\n\nexport default CommonHeader;\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div id=\"home\">\r\n      <ul>\r\n        <li><Link to=\"/Asset\">대한민국 순자산 순위 구하기</Link></li>\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport Parser from 'html-react-parser';\r\n\r\nclass Home extends Component {\r\n  state = {\r\n    myAsset: '',\r\n    result: ''\r\n  }\r\n\r\n  assetChange = (e) => {\r\n    this.setState({myAsset: e.target.value});\r\n  }\r\n\r\n  actionCompute = (e) => {\r\n    if (e.type !== 'click' && e.key !== 'Enter') {\r\n      return;\r\n    }\r\n\r\n    let myAsset = parseInt(this.state.myAsset);\r\n\r\n    if (!/^[0-9]*$/.test(myAsset)) {\r\n      alert('0이상의 정수만 입력해주세요.');\r\n      return;\r\n    }\r\n\r\n    let group = 0;\r\n\r\n    const koreaPeople = 51843195;\r\n    const percentile = [\r\n      0, // 100%\r\n      10700000, // 90%\r\n      43310000, // 80%\r\n      89500000, // 70%\r\n      140650000, // 60%\r\n      200500000, // 50%\r\n      274960000, // 40%\r\n      369140000, // 30%\r\n      517000000, // 20%\r\n      810120000, // 10%\r\n      1400000000, // 5%\r\n      3000000000, // 1%\r\n      1240000000000, // 36위 0.000001 %\r\n      19840000000000 // 1위\r\n    ]\r\n\r\n    percentile.forEach((o, i) => {\r\n      if (myAsset > o) {\r\n        group++;\r\n      }\r\n    });\r\n\r\n    const newFormat = new Intl.NumberFormat();\r\n    let max = percentile[group] - percentile[group - 1];\r\n    let val = max - (myAsset - percentile[group - 1]);\r\n    let percent = 0;\r\n    let ranking = 0;\r\n\r\n    if (group === 0) {\r\n      this.setState({result: '당신의 순자산은 대한민국 상위 <strong>100%</strong> 입니다'});\r\n    } else if (group < 10) {\r\n      percent = ((10 - group) * 10 + val / max * 10);\r\n      ranking = parseInt(koreaPeople * percent / 100);\r\n      this.setState({result: `당신의 순자산은 대한민국 상위 <strong>${percent.toFixed(2)}%</strong> 입니다<br>순위는 <strong>${newFormat.format(ranking)}위</strong> 이며<br>순위 아래로는 <strong>${newFormat.format(koreaPeople - ranking)}명</strong>이 있습니다.`});\r\n    } else {\r\n      if (group === 10) { // 5 ~ 10 %\r\n        percent = (5 + val / max * 5);\r\n        ranking = parseInt(koreaPeople * percent / 100);\r\n        this.setState({result: `당신의 순자산은 대한민국 상위 <strong>${percent.toFixed(2)}%</strong> 입니다<br>순위는 <strong>${newFormat.format(ranking)}위</strong> 이며<br>순위 아래로는 <strong>${newFormat.format(koreaPeople - ranking)}명</strong>이 있습니다.`});\r\n      }\r\n      if (group === 11) { // 1 ~ 5 %\r\n        percent = (1 + val / max * 4);\r\n        ranking = parseInt(koreaPeople * percent / 100);\r\n        this.setState({result: `당신의 순자산은 대한민국 상위 <strong>${percent.toFixed(2)}%</strong> 입니다<br>순위는 <strong>${newFormat.format(ranking)}위</strong> 이며<br>순위 아래로는 <strong>${newFormat.format(koreaPeople - ranking)}명</strong>이 있습니다.`});\r\n      }\r\n      if (group === 12) { // 36위 ~ 1 %\r\n        this.setState({result: `당신의 순자산은 대한민국 상위 <strong>1%</strong> 입니다.`});\r\n      }\r\n      if (group === 13) { // 2위 ~ 36위\r\n        this.setState({result: `당신의 순자산은 대한민국 상위 <strong>0.000001%</strong> 입니다.`});\r\n      }\r\n      if (group === 14) { // 1위\r\n        this.setState({result: `당신의 순자산은 대한민국 상위 <strong>1위</strong> 입니다.`});\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"asset\">\r\n        <h2>대한민국 순자산 순위 구하기</h2>\r\n        <div className=\"bothbox\">\r\n          <input\r\n            type=\"number\"\r\n            value={this.state.myAsset}\r\n            onChange={this.assetChange}\r\n            onKeyPress={this.actionCompute}\r\n            placeholder=\"순자산을 입력해주세요\"\r\n          />\r\n          <button type=\"button\" onClick={this.actionCompute}>계산하기</button>\r\n        </div>\r\n        <p className=\"result\">{Parser(this.state.result)}</p>\r\n        <p className=\"notice\">※ 위 결과는 통계청 자료를 기반으로 근사치를 구한수치입니다.</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;","import React from 'react';\nimport CommonHeader from 'layout/CommonHeader';\nimport { Route, HashRouter } from \"react-router-dom\";\n\nimport Home from 'pages/Home';\nimport Asset from \"pages/Asset\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <div id=\"wrap\">\n        <CommonHeader />\n\n        <div id=\"container\">\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/Asset\" component={Asset} />\n        </div>\n      </div>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from 'pages/App';\nimport * as serviceWorker from 'serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}